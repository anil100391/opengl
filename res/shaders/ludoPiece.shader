// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
#shader vertex
#version 330 core

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
layout(location = 0) in vec4 position;
layout(location = 1) in vec2 texCoord;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
uniform mat4 u_MVP;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
void main()
{
    gl_Position = u_MVP * position;
};

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
#shader fragment
#version 330 core

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
layout(location = 0) out vec4 color;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
uniform int u_CellType;
uniform int u_CellIndex;
uniform float u_Size;
uniform vec2 u_CellOrigin;
uniform vec4 u_Color;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
float plot( vec2 xy )
{
    return smoothstep( 0.0, 0.10, min( fract( xy.x ), fract( xy.y ) ) );
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
void main()
{
    color = vec4(u_Color);
    float radius = length( vec2( gl_FragCoord ) - (u_CellOrigin + u_Size / 2) );
    float fac = step(-0.8, -2.0 * radius / u_Size);
    float ringsFac = sqrt(4.0 * mod(2.0 * radius / u_Size, 0.25));
    color = vec4(mix(color.rgb, 0.7 * color.rgb, ringsFac), fac);

    /*
    vec2 coord = vec2( gl_FragCoord ) - u_CellOrigin;
    coord = coord / u_Size;
    color = (u_CellIndex / 225.0f) * color;
    */
}

